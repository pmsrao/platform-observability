{
  "sql_queries": {
    "version": "1.0",
    "description": "Human-readable SQL queries for Platform Observability Dashboard",
    "created": "2025-01-15",
    "author": "Platform Observability Team",
    "datasets": {
      "dataset_001": {
        "name": "dataset_001",
        "displayName": "Total Cost Summary",
        "description": "Dataset for Total Cost Summary",
        "queryLines": [
          "WITH cost_summary AS (",
          "  SELECT ",
          "    SUM(usage_cost) as total_cost_usd,",
          "    COUNT(DISTINCT workspace_key) as active_workspaces,",
          "    COUNT(DISTINCT entity_key) as active_entities,",
          "    AVG(usage_cost) as avg_daily_cost ",
          "  FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "  WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          ") ",
          "SELECT ",
          "  'Total Cost (30 days)' as metric,",
          "  CONCAT('$', FORMAT_NUMBER(total_cost_usd, 2)) as value,",
          "  'USD' as unit ",
          "FROM cost_summary ",
          "UNION ALL ",
          "SELECT ",
          "  'Active Workspaces' as metric,",
          "  CAST(active_workspaces AS STRING) as value,",
          "  'count' as unit ",
          "FROM cost_summary ",
          "UNION ALL ",
          "SELECT ",
          "  'Active Entities' as metric,",
          "  CAST(active_entities AS STRING) as value,",
          "  'count' as unit ",
          "FROM cost_summary ",
          "UNION ALL ",
          "SELECT ",
          "  'Avg Daily Cost' as metric,",
          "  CONCAT('$', FORMAT_NUMBER(avg_daily_cost, 2)) as value,",
          "  'USD/day' as unit ",
          "FROM cost_summary "
        ],
        "query_description": "SQL query for Total Cost Summary",
        "columns": {}
      },
      "dataset_002": {
        "name": "dataset_002",
        "displayName": "Cost Trend",
        "description": "Dataset for Cost Trend",
        "queryLines": [
          "SELECT ",
          "  date_key,",
          "  SUM(usage_cost) as daily_cost_usd,",
          "  AVG(SUM(usage_cost)) OVER (ORDER BY date_key ROWS 6 PRECEDING) as rolling_7day_avg ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "GROUP BY date_key ",
          "ORDER BY date_key "
        ],
        "query_description": "SQL query for Cost Trend",
        "columns": {}
      },
      "dataset_003": {
        "name": "dataset_003",
        "displayName": "Top Cost Centers",
        "description": "Dataset for Top Cost Centers",
        "queryLines": [
          "SELECT ",
          "  cost_center,",
          "  line_of_business,",
          "  SUM(usage_cost) as total_cost_usd,",
          "  COUNT(DISTINCT entity_key) as active_entities,",
          "  ROUND(try_divide(SUM(usage_cost), COUNT(DISTINCT entity_key)), 2) as cost_per_entity ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "  AND cost_center != 'unallocated' ",
          "GROUP BY cost_center, line_of_business ",
          "ORDER BY total_cost_usd DESC ",
          "LIMIT 10 "
        ],
        "query_description": "SQL query for Top Cost Centers",
        "columns": {}
      },
      "dataset_004": {
        "name": "dataset_004",
        "displayName": "Runtime Health",
        "description": "Dataset for Runtime Health",
        "queryLines": [
          "WITH runtime_health AS (",
          "  SELECT ",
          "    c.dbr_version,",
          "    COUNT(DISTINCT c.cluster_key) as cluster_count,",
          "    SUM(f.usage_cost) as total_cost,",
          "    CASE ",
          "      WHEN (c.dbr_version LIKE '%16.%' OR c.dbr_version LIKE '%17.%') THEN 'Current' ",
          "      WHEN c.dbr_version LIKE '%15.%' THEN 'Recent' ",
          "      WHEN c.dbr_version LIKE '%14.%' THEN 'Older' ",
          "      ELSE 'Legacy' ",
          "    END as version_category ",
          "  FROM platform_observability.plt_gold.gld_fact_usage_priced_day f ",
          "  JOIN platform_observability.plt_gold.gld_dim_cluster c ON f.cluster_key = c.cluster_key ",
          "  WHERE f.date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "    AND c.is_current = true ",
          "  GROUP BY c.dbr_version, version_category ",
          ") ",
          "SELECT ",
          "  version_category,",
          "  COUNT(*) as runtime_versions,",
          "  SUM(cluster_count) as total_clusters,",
          "  SUM(total_cost) as total_cost_usd ",
          "FROM runtime_health ",
          "GROUP BY version_category ",
          "ORDER BY ",
          "  CASE version_category ",
          "    WHEN 'Current' THEN 1 ",
          "    WHEN 'Recent' THEN 2 ",
          "    WHEN 'Older' THEN 3 ",
          "    ELSE 4 ",
          "  END "
        ],
        "query_description": "SQL query for Runtime Health",
        "columns": {}
      },
      "dataset_005": {
        "name": "dataset_005",
        "displayName": "Monthly Cost Breakdown",
        "description": "Dataset for Monthly Cost Breakdown",
        "queryLines": [
          "SELECT ",
          "  DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM') as month,",
          "  cost_center,",
          "  line_of_business,",
          "  SUM(usage_cost) as total_cost_usd,",
          "  COUNT(DISTINCT entity_key) as active_entities,",
          "  ROUND(try_divide(SUM(usage_cost), COUNT(DISTINCT entity_key)), 2) as cost_per_entity ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "WHERE cost_center != 'unallocated' ",
          "  AND date_key >= date_format(date_sub(current_date(), 90), 'yyyyMMdd') ",
          "GROUP BY DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM'), cost_center, line_of_business ",
          "ORDER BY month DESC, total_cost_usd DESC "
        ],
        "query_description": "SQL query for Monthly Cost Breakdown",
        "columns": {}
      },
      "dataset_006": {
        "name": "dataset_006",
        "displayName": "Job Performance Analysis",
        "description": "Dataset for Job Performance Analysis",
        "queryLines": [
          "SELECT ",
          "  e.name as job_name,",
          "  w.workspace_name,",
          "  COUNT(DISTINCT f.job_run_id) as total_runs,",
          "  SUM(f.usage_cost) as total_cost_usd,",
          "  ROUND(try_divide(SUM(f.usage_cost), COUNT(DISTINCT f.job_run_id)), 2) as cost_per_run ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day f ",
          "LEFT JOIN platform_observability.plt_gold.gld_dim_entity e ON f.entity_key = e.entity_key ",
          "LEFT JOIN platform_observability.plt_gold.gld_dim_cluster c ON f.cluster_key = c.cluster_key ",
          "LEFT JOIN platform_observability.plt_gold.gld_dim_workspace w ON f.workspace_key = w.workspace_key ",
          "WHERE f.date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "  AND e.is_current = true ",
          "  AND e.entity_type IN ('JOB', 'PIPELINE') ",
          "GROUP BY e.name, w.workspace_name ",
          "HAVING COUNT(DISTINCT f.job_run_id) >= 3 ",
          "ORDER BY total_cost_usd DESC ",
          "LIMIT 15 "
        ],
        "query_description": "SQL query for Job Performance Analysis",
        "columns": {}
      },
      "dataset_007": {
        "name": "dataset_007",
        "displayName": "Filter Parameters",
        "description": "Dataset for Filter Parameters",
        "queryLines": [
          "SELECT ",
          "  DISTINCT workspace_name ",
          "FROM platform_observability.plt_gold.gld_dim_workspace ",
          "WHERE status = 'RUNNING' ",
          "ORDER BY workspace_name "
        ],
        "query_description": "SQL query for Filter Parameters",
        "columns": {}
      },
      "dataset_008": {
        "name": "dataset_008",
        "displayName": "Cost Allocation by Business Unit",
        "description": "Dataset for Cost Allocation by Business Unit",
        "queryLines": [
          "SELECT ",
          "  line_of_business,",
          "  cost_center,",
          "  department,",
          "  SUM(usage_cost) as total_cost_usd,",
          "  COUNT(DISTINCT entity_key) as active_entities,",
          "  COUNT(DISTINCT workspace_key) as active_workspaces,",
          "  ROUND(try_divide(SUM(usage_cost), COUNT(DISTINCT entity_key)), 2) as cost_per_entity ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "GROUP BY line_of_business, cost_center, department ",
          "ORDER BY total_cost_usd DESC "
        ],
        "query_description": "SQL query for Cost Allocation by Business Unit",
        "columns": {}
      },
      "dataset_009": {
        "name": "dataset_009",
        "displayName": "Budget vs Actual Tracking",
        "description": "Dataset for Budget vs Actual Tracking",
        "queryLines": [
          "WITH monthly_costs AS (",
          "  SELECT ",
          "    DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM') as month,",
          "    SUM(usage_cost) as actual_cost,",
          "    LAG(SUM(usage_cost)) OVER (ORDER BY DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM')) as prev_month_cost ",
          "  FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "  WHERE date_key >= date_format(date_sub(current_date(), 90), 'yyyyMMdd') ",
          "  GROUP BY DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM') ",
          ") ",
          "SELECT ",
          "  month,",
          "  actual_cost,",
          "  prev_month_cost,",
          "  ROUND(try_divide((actual_cost - prev_month_cost), prev_month_cost) * 100, 2) as month_over_month_change_pct ",
          "FROM monthly_costs ",
          "ORDER BY month DESC "
        ],
        "query_description": "SQL query for Budget vs Actual Tracking",
        "columns": {}
      },
      "dataset_010": {
        "name": "dataset_010",
        "displayName": "Runtime Modernization Opportunities",
        "description": "Dataset for Runtime Modernization Opportunities",
        "queryLines": [
          "WITH runtime_analysis AS (",
          "  SELECT ",
          "    c.cluster_id,",
          "    c.cluster_name,",
          "    c.dbr_version,",
          "    '' major_version,",
          "    '' minor_version,",
          "    0 runtime_age_months,",
          "    '' is_lts,",
          "    c.is_current,",
          "    CASE ",
          "      WHEN (c.dbr_version LIKE '%17.%' OR c.dbr_version LIKE '%16.%') THEN 'Current' ",
          "      WHEN c.dbr_version LIKE '%15.%' THEN 'Recent' ",
          "      WHEN c.dbr_version LIKE '%14.%' THEN 'Older' ",
          "      ELSE 'Legacy' ",
          "    END as version_category,",
          "    CASE ",
          "      WHEN c.dbr_version LIKE '%13.%' OR c.dbr_version LIKE '%12.%' THEN 'CRITICAL - End of Support' ",
          "      WHEN c.dbr_version LIKE '%14.%' THEN 'HIGH - Plan for Upgrade' ",
          "      WHEN (c.dbr_version LIKE '%17.%' OR c.dbr_version LIKE '%16.%' OR c.dbr_version LIKE '%15.%') THEN 'LOW - Current and Supported' ",
          "      ELSE 'MEDIUM - Need Review' ",
          "    END as upgrade_priority ",
          "  FROM platform_observability.plt_gold.gld_dim_cluster c ",
          "  WHERE c.is_current = true ",
          ") ",
          "SELECT ",
          "  upgrade_priority,",
          "  version_category,",
          "  COUNT(*) as cluster_count,",
          "  AVG(runtime_age_months) as avg_runtime_age,",
          "  STRING_AGG(DISTINCT dbr_version, ', ') as affected_runtimes ",
          "FROM runtime_analysis ",
          "GROUP BY upgrade_priority, version_category ",
          "ORDER BY ",
          "  CASE upgrade_priority ",
          "    WHEN 'CRITICAL - End of Support' THEN 1 ",
          "    WHEN 'HIGH - Plan for Upgrade' THEN 2 ",
          "    WHEN 'MEDIUM - Consider Upgrade' THEN 3 ",
          "    ELSE 4 ",
          "  END "
        ],
        "query_description": "SQL query for Runtime Modernization Opportunities",
        "columns": {}
      },
      "dataset_011": {
        "name": "dataset_011",
        "displayName": "Cluster Sizing Optimization",
        "description": "Dataset for Cluster Sizing Optimization",
        "queryLines": [
          "SELECT ",
          "  c.cluster_name,",
          "  c.worker_node_type_category,",
          "  c.min_autoscale_workers,",
          "  c.max_autoscale_workers,",
          "  SUM(f.usage_cost) as total_cost,",
          "  COUNT(DISTINCT f.job_run_id) as total_runs,",
          "  ROUND(try_divide(SUM(f.usage_cost), COUNT(DISTINCT f.job_run_id)), 2) as cost_per_run ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day f ",
          "JOIN platform_observability.plt_gold.gld_dim_cluster c ON f.cluster_key = c.cluster_key ",
          "WHERE f.date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "  AND c.is_current = true ",
          "GROUP BY c.cluster_name, c.worker_node_type_category, c.min_autoscale_workers, c.max_autoscale_workers ",
          "HAVING COUNT(DISTINCT f.job_run_id) >= 1 ",
          "ORDER BY total_cost DESC ",
          "LIMIT 20 "
        ],
        "query_description": "SQL query for Cluster Sizing Optimization",
        "columns": {}
      },
      "dataset_012": {
        "name": "dataset_012",
        "displayName": "Node Type Analysis",
        "description": "Dataset for Node Type Analysis",
        "queryLines": [
          "SELECT ",
          "  c.worker_node_type_category,",
          "  c.dbr_version,",
          "  SUM(f.usage_cost) as total_cost,",
          "  COUNT(DISTINCT f.job_run_id) as total_runs,",
          "  ROUND(try_divide(SUM(f.usage_cost), COUNT(DISTINCT f.job_run_id)), 2) as cost_per_run ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day f ",
          "JOIN platform_observability.plt_gold.gld_dim_cluster c ON f.cluster_key = c.cluster_key ",
          "WHERE f.date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "  AND c.is_current = true ",
          "GROUP BY c.worker_node_type_category, c.dbr_version ",
          "ORDER BY total_cost DESC "
        ],
        "query_description": "SQL query for Node Type Analysis",
        "columns": {}
      },
      "dataset_013": {
        "name": "dataset_013",
        "displayName": "Workflow Hierarchy Cost",
        "description": "Dataset for Workflow Hierarchy Cost",
        "queryLines": [
          "SELECT ",
          "  workflow_level,",
          "  parent_workflow_name,",
          "  line_of_business,",
          "  cost_center,",
          "  COUNT(DISTINCT entity_key) as entity_count,",
          "  SUM(usage_cost) as total_cost_usd,",
          "  COUNT(DISTINCT workspace_key) as workspace_count,",
          "  ROUND(try_divide(SUM(usage_cost), COUNT(DISTINCT entity_key)), 2) as cost_per_entity ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "  AND workflow_level != 'STANDALONE' ",
          "GROUP BY workflow_level, parent_workflow_name, line_of_business, cost_center ",
          "ORDER BY total_cost_usd DESC "
        ],
        "query_description": "SQL query for Workflow Hierarchy Cost",
        "columns": {}
      },
      "dataset_014": {
        "name": "dataset_014",
        "displayName": "Tag Quality Analysis",
        "description": "Dataset for Tag Quality Analysis",
        "queryLines": [
          "WITH tag_coverage AS (",
          "  SELECT ",
          "    workspace_key,",
          "    COUNT(*) as total_records,",
          "    SUM(CASE WHEN cost_center != 'unallocated' THEN 1 ELSE 0 END) as cost_center_tagged,",
          "    SUM(CASE WHEN line_of_business != 'Unknown' THEN 1 ELSE 0 END) as lob_tagged,",
          "    SUM(CASE WHEN department IS NOT NULL AND department != '' THEN 1 ELSE 0 END) as dept_tagged ",
          "  FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "  WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "  GROUP BY workspace_key ",
          ") ",
          "SELECT ",
          "  w.workspace_name,",
          "  tc.total_records,",
          "  tc.cost_center_tagged,",
          "  tc.lob_tagged,",
          "  tc.dept_tagged,",
          "  ROUND(try_divide(tc.cost_center_tagged, tc.total_records) * 100, 2) as cost_center_coverage_pct,",
          "  ROUND(try_divide(tc.lob_tagged, tc.total_records) * 100, 2) as lob_coverage_pct,",
          "  ROUND(try_divide(tc.dept_tagged, tc.total_records) * 100, 2) as dept_coverage_pct ",
          "FROM tag_coverage tc ",
          "JOIN platform_observability.plt_gold.gld_dim_workspace w ON tc.workspace_key = w.workspace_key ",
          "ORDER BY cost_center_coverage_pct ASC "
        ],
        "query_description": "SQL query for Tag Quality Analysis",
        "columns": {}
      },
      "dataset_015": {
        "name": "dataset_015",
        "displayName": "Usage Pattern Analysis",
        "description": "Dataset for Usage Pattern Analysis",
        "queryLines": [
          "SELECT ",
          "  environment,",
          "  HOUR(usage_start_time) as hour_of_day,",
          "  COUNT(*) as usage_count,",
          "  SUM(usage_quantity) as total_usage,",
          "  AVG(usage_quantity) as avg_usage,",
          "  SUM(usage_cost) as total_cost ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "  AND usage_start_time IS NOT NULL ",
          "GROUP BY environment, HOUR(usage_start_time) ",
          "ORDER BY environment, hour_of_day "
        ],
        "query_description": "SQL query for Usage Pattern Analysis",
        "columns": {}
      },
      "dataset_016": {
        "name": "dataset_016",
        "displayName": "Business Unit Performance",
        "description": "Dataset for Business Unit Performance",
        "queryLines": [
          "SELECT ",
          "  line_of_business,",
          "  use_case,",
          "  COUNT(DISTINCT entity_key) as active_entities,",
          "  SUM(usage_cost) as total_cost_usd,",
          "  SUM(usage_quantity) as total_usage,",
          "  ROUND(try_divide(SUM(usage_cost), COUNT(DISTINCT entity_key)), 2) as cost_per_entity,",
          "  ROUND(try_divide(SUM(usage_cost), SUM(usage_quantity)), 4) as cost_per_unit ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          "GROUP BY line_of_business, use_case ",
          "ORDER BY total_cost_usd DESC "
        ],
        "query_description": "SQL query for Business Unit Performance",
        "columns": {}
      },
      "dataset_017": {
        "name": "dataset_017",
        "displayName": "Project Cost Tracking",
        "description": "Dataset for Project Cost Tracking",
        "queryLines": [
          "SELECT ",
          "  DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM') as month,",
          "  line_of_business,",
          "  department,",
          "  SUM(usage_cost) as project_cost_usd,",
          "  COUNT(DISTINCT entity_key) as active_entities,",
          "  COUNT(DISTINCT workspace_key) as active_workspaces ",
          "FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "WHERE date_key >= date_format(date_sub(current_date(), 90), 'yyyyMMdd') ",
          "GROUP BY DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM'), line_of_business, department ",
          "ORDER BY month DESC, project_cost_usd DESC "
        ],
        "query_description": "SQL query for Project Cost Tracking",
        "columns": {}
      },
      "dataset_018": {
        "name": "dataset_018",
        "displayName": "Cost Center Analysis",
        "description": "Dataset for Cost Center Analysis",
        "queryLines": [
          "WITH cost_summary AS (",
          "  SELECT ",
          "    cost_center,",
          "    line_of_business,",
          "    department,",
          "    DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM') as month,",
          "    SUM(usage_cost) as monthly_cost,",
          "    COUNT(DISTINCT entity_key) as active_entities ",
          "  FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "  WHERE nvl(cost_center, 'unallocated') != 'unallocated' ",
          "    AND date_key >= date_format(date_sub(current_date(), 90), 'yyyyMMdd') ",
          "  GROUP BY cost_center, line_of_business, department, DATE_FORMAT(TO_DATE(CAST(date_key AS STRING), 'yyyyMMdd'), 'yyyy-MM') ",
          ") ",
          "SELECT ",
          "  cost_center,",
          "  line_of_business,",
          "  department,",
          "  month,",
          "  monthly_cost,",
          "  active_entities,",
          "  ROUND(try_divide(monthly_cost, active_entities), 2) as cost_per_entity,",
          "  LAG(monthly_cost) OVER (PARTITION BY cost_center ORDER BY month) as prev_month_cost,",
          "  ROUND(try_divide((monthly_cost - LAG(monthly_cost) OVER (PARTITION BY cost_center ORDER BY month)), LAG(monthly_cost) OVER (PARTITION BY cost_center ORDER BY month)) * 100, 2) as cost_change_pct ",
          "FROM cost_summary ",
          "ORDER BY cost_center, month "
        ],
        "query_description": "SQL query for Cost Center Analysis",
        "columns": {}
      },
      "dataset_019": {
        "name": "dataset_019",
        "displayName": "KPI Metrics",
        "description": "Dataset for KPI Metrics",
        "queryLines": [
          "WITH kpi_metrics AS (",
          "  SELECT ",
          "    SUM(usage_cost) as total_cost_usd,",
          "    COUNT(DISTINCT workspace_key) as active_workspaces,",
          "    COUNT(DISTINCT entity_key) as active_entities,",
          "    AVG(usage_cost) as avg_daily_cost ",
          "  FROM platform_observability.plt_gold.gld_fact_usage_priced_day ",
          "  WHERE date_key >= date_format(date_sub(current_date(), 30), 'yyyyMMdd') ",
          ") ",
          "SELECT ",
          "  total_cost_usd,",
          "  active_workspaces,",
          "  active_entities,",
          "  avg_daily_cost ",
          "FROM kpi_metrics "
        ],
        "query_description": "SQL query for KPI Metrics",
        "columns": {}
      }
    }
  },
  "query_explanations": {
    "dataset_001": {
      "purpose": "Provides data for Total Cost Summary",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_002": {
      "purpose": "Provides data for Cost Trend",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_003": {
      "purpose": "Provides data for Top Cost Centers",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_004": {
      "purpose": "Provides data for Runtime Health",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_005": {
      "purpose": "Provides data for Monthly Cost Breakdown",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_006": {
      "purpose": "Provides data for Job Performance Analysis",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_007": {
      "purpose": "Provides data for Filter Parameters",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_008": {
      "purpose": "Provides data for Cost Allocation by Business Unit",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_009": {
      "purpose": "Provides data for Budget vs Actual Tracking",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_010": {
      "purpose": "Provides data for Runtime Modernization Opportunities",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_011": {
      "purpose": "Provides data for Cluster Sizing Optimization",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_012": {
      "purpose": "Provides data for Node Type Analysis",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_013": {
      "purpose": "Provides data for Workflow Hierarchy Cost",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_014": {
      "purpose": "Provides data for Tag Quality Analysis",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_015": {
      "purpose": "Provides data for Usage Pattern Analysis",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_016": {
      "purpose": "Provides data for Business Unit Performance",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_017": {
      "purpose": "Provides data for Project Cost Tracking",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_018": {
      "purpose": "Provides data for Cost Center Analysis",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    },
    "dataset_019": {
      "purpose": "Provides data for KPI Metrics",
      "filters": [
        "Date range filtering where applicable"
      ],
      "joins": [
        "Uses Gold layer tables"
      ],
      "aggregations": [
        "Various aggregations based on query requirements"
      ]
    }
  },
  "parameter_usage": {
    "param_start_date": {
      "usage": "Used in WHERE clause to filter data from start date",
      "format": "YYYY-MM-DDTHH:MM:SS.000",
      "sql_usage": "date_format(:param_start_date, 'yyyyMMdd')"
    },
    "param_end_date": {
      "usage": "Used in WHERE clause to filter data until end date",
      "format": "YYYY-MM-DDTHH:MM:SS.000",
      "sql_usage": "date_format(:param_end_date, 'yyyyMMdd')"
    }
  },
  "validation_rules": {
    "sql_syntax": [
      "All SQL statements must be valid",
      "Parameter placeholders must use :param_name format",
      "Table aliases must be consistent",
      "WHERE clauses must include date filtering"
    ],
    "parameter_binding": [
      "All parameters must be defined in dataset parameters array",
      "Parameter keywords must match SQL placeholders",
      "Default values must be provided",
      "Parameter data types must be correct"
    ],
    "column_consistency": [
      "Column names must match widget field references",
      "Data types must be appropriate for widget types",
      "Aggregations must be properly defined"
    ]
  },
  "best_practices": {
    "sql_optimization": [
      "Use appropriate table aliases",
      "Include necessary WHERE clauses for filtering",
      "Use efficient aggregations",
      "Order results appropriately"
    ],
    "parameter_handling": [
      "Use consistent parameter naming",
      "Provide meaningful default values",
      "Include parameter descriptions",
      "Validate parameter formats"
    ],
    "data_quality": [
      "Handle NULL values appropriately",
      "Use proper data types",
      "Include data validation",
      "Provide meaningful column descriptions"
    ]
  }
}